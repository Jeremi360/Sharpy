
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEleftGREATERLESSGREATER_EQUALLESS_EQUALNOT_EQUALrightEQUALSCLASS COLON COMMENT CONST DIVIDE DIVIDE_EQUAL ELSE ENUM EQUALS FALSE FOR FUNC GREATER GREATER_EQUAL IDENTIFIER IF LESS LESS_EQUAL LPAREN MINUS MINUS_EQUAL MULTIPLY MULTIPLY_EQUAL NEWLINE NOT_EQUAL NUMBER ON PLUS PLUS_EQUAL PRIV RPAREN SEMICOLON SIGNAL STATIC STRING TRUE UNTIL VAR WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : VAR IDENTIFIER EQUALS expression SEMICOLONstatement : IDENTIFIER EQUALS expression SEMICOLON\n| expression SEMICOLONstatement : IF expression COLON statement_list SEMICOLONstatement : IF expression COLON statement_list SEMICOLON ELSE COLON statement_list SEMICOLONexpression : expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression GREATER expression\n| expression LESS expression\n| expression GREATER_EQUAL expression\n| expression LESS_EQUAL expression\n| expression NOT_EQUAL expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'VAR':([0,2,3,10,13,37,40,41,42,43,45,46,47,],[4,4,-3,-2,-6,4,-5,4,-4,-7,4,4,-8,]),'IDENTIFIER':([0,2,3,4,7,8,10,12,13,14,15,16,17,18,19,20,21,22,26,37,40,41,42,43,45,46,47,],[5,5,-3,11,24,24,-2,24,-6,24,24,24,24,24,24,24,24,24,24,5,-5,5,-4,-7,5,5,-8,]),'IF':([0,2,3,10,13,37,40,41,42,43,45,46,47,],[7,7,-3,-2,-6,7,-5,7,-4,-7,7,7,-8,]),'LPAREN':([0,2,3,7,8,10,12,13,14,15,16,17,18,19,20,21,22,26,37,40,41,42,43,45,46,47,],[8,8,-3,8,8,-2,8,-6,8,8,8,8,8,8,8,8,8,8,8,-5,8,-4,-7,8,8,-8,]),'NUMBER':([0,2,3,7,8,10,12,13,14,15,16,17,18,19,20,21,22,26,37,40,41,42,43,45,46,47,],[9,9,-3,9,9,-2,9,-6,9,9,9,9,9,9,9,9,9,9,9,-5,9,-4,-7,9,9,-8,]),'$end':([1,2,3,10,13,40,42,43,47,],[0,-1,-3,-2,-6,-5,-4,-7,-8,]),'SEMICOLON':([3,5,6,9,10,13,24,27,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,46,47,],[-3,-20,13,-19,-2,-6,-20,40,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,42,-5,43,-4,-7,47,-8,]),'EQUALS':([5,11,],[12,26,]),'PLUS':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,14,-19,14,-20,14,14,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,14,]),'MINUS':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,15,-19,15,-20,15,15,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,15,]),'MULTIPLY':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,16,-19,16,-20,16,16,16,16,-11,-12,-13,-14,-15,-16,-17,-18,16,]),'DIVIDE':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,17,-19,17,-20,17,17,17,17,-11,-12,-13,-14,-15,-16,-17,-18,17,]),'GREATER':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,18,-19,18,-20,18,18,18,18,18,18,-13,-14,-15,-16,-17,-18,18,]),'LESS':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,19,-19,19,-20,19,19,19,19,19,19,-13,-14,-15,-16,-17,-18,19,]),'GREATER_EQUAL':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,20,-19,20,-20,20,20,20,20,20,20,-13,-14,-15,-16,-17,-18,20,]),'LESS_EQUAL':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,21,-19,21,-20,21,21,21,21,21,21,-13,-14,-15,-16,-17,-18,21,]),'NOT_EQUAL':([5,6,9,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,],[-20,22,-19,22,-20,22,22,22,22,22,22,-13,-14,-15,-16,-17,-18,22,]),'COLON':([9,23,24,28,29,30,31,32,33,34,35,36,38,44,],[-19,37,-20,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,45,]),'RPAREN':([9,24,25,28,29,30,31,32,33,34,35,36,38,],[-19,-20,38,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,]),'ELSE':([43,],[44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,37,45,],[2,41,46,]),'statement':([0,2,37,41,45,46,],[3,10,3,10,3,10,]),'expression':([0,2,7,8,12,14,15,16,17,18,19,20,21,22,26,37,41,45,46,],[6,6,23,25,27,28,29,30,31,32,33,34,35,36,39,6,6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',17),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',21),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',22),
  ('statement -> VAR IDENTIFIER EQUALS expression SEMICOLON','statement',5,'p_statement_var_declaration','parser.py',28),
  ('statement -> IDENTIFIER EQUALS expression SEMICOLON','statement',4,'p_statement_assignment_or_expression','parser.py',33),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_assignment_or_expression','parser.py',34),
  ('statement -> IF expression COLON statement_list SEMICOLON','statement',5,'p_statement_if','parser.py',40),
  ('statement -> IF expression COLON statement_list SEMICOLON ELSE COLON statement_list SEMICOLON','statement',9,'p_statement_if_else','parser.py',45),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',51),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',52),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',53),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',54),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','parser.py',55),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',56),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression_binop','parser.py',57),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression_binop','parser.py',58),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression_binop','parser.py',59),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',63),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',67),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',71),
]
